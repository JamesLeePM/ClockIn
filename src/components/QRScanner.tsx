import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  SafeAreaView,
  StatusBar,
  Dimensions,
} from 'react-native';
import { BarCodeScanner } from 'expo-barcode-scanner';
import { Employee, Company, TimeEntry } from '../types';
import { TimeTrackingService } from '../services/TimeTrackingService';
import { LocationService } from '../services/LocationService';

interface QRScannerProps {
  employee: Employee;
  company: Company;
  onTimeEntry: (entry: TimeEntry) => void;
  onClose: () => void;
}

interface QRCodeData {
  type: 'checkin' | 'checkout';
  companyId: string;
  timestamp: number;
  location?: {
    latitude: number;
    longitude: number;
  };
}

export const QRScanner: React.FC<QRScannerProps> = ({
  employee,
  company,
  onTimeEntry,
  onClose,
}) => {
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [scanned, setScanned] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);

  const timeTrackingService = TimeTrackingService.getInstance();
  const locationService = LocationService.getInstance();

  useEffect(() => {
    getBarCodeScannerPermissions();
  }, []);

  const getBarCodeScannerPermissions = async () => {
    const { status } = await BarCodeScanner.requestPermissionsAsync();
    setHasPermission(status === 'granted');
  };

  const handleBarCodeScanned = async ({ type, data }: { type: string; data: string }) => {
    if (scanned || isProcessing) return;
    
    setScanned(true);
    setIsProcessing(true);

    try {
      // Parse QR code data
      const qrData: QRCodeData = JSON.parse(data);
      
      // Validate QR code
      if (!validateQRCode(qrData)) {
        Alert.alert('Invalid QR Code', 'This QR code is not valid for check-in/out.');
        setScanned(false);
        setIsProcessing(false);
        return;
      }

      // Check if QR code is for the correct company
      if (qrData.companyId !== company.id) {
        Alert.alert('Wrong Company', 'This QR code is for a different company.');
        setScanned(false);
        setIsProcessing(false);
        return;
      }

      // Check if QR code is not too old (within 5 minutes)
      const qrTimestamp = new Date(qrData.timestamp);
      const now = new Date();
      const timeDiff = now.getTime() - qrTimestamp.getTime();
      
      if (timeDiff > 5 * 60 * 1000) { // 5 minutes
        Alert.alert('QR Code Expired', 'This QR code has expired. Please get a fresh one.');
        setScanned(false);
        setIsProcessing(false);
        return;
      }

      // Process check-in/out based on QR code type
      let result;
      if (qrData.type === 'checkin') {
        result = await timeTrackingService.checkIn(employee, company);
      } else {
        result = await timeTrackingService.checkOut(employee, company);
      }

      if (result.success && result.timeEntry) {
        onTimeEntry(result.timeEntry);
        Alert.alert('Success', result.message, [
          { text: 'OK', onPress: onClose }
        ]);
      } else {
        Alert.alert('Error', result.message);
        setScanned(false);
      }
    } catch (error) {
      console.error('Error processing QR code:', error);
      Alert.alert('Error', 'Failed to process QR code. Please try again.');
      setScanned(false);
    } finally {
      setIsProcessing(false);
    }
  };

  const validateQRCode = (data: QRCodeData): boolean => {
    return (
      data &&
      typeof data.type === 'string' &&
      (data.type === 'checkin' || data.type === 'checkout') &&
      typeof data.companyId === 'string' &&
      typeof data.timestamp === 'number'
    );
  };

  const generateQRCode = () => {
    // This would typically be generated by the company/admin system
    // For demo purposes, we'll create a sample QR code
    const qrData: QRCodeData = {
      type: 'checkin',
      companyId: company.id,
      timestamp: Date.now(),
    };
    
    Alert.alert(
      'Sample QR Code Data',
      `For testing, you can use this QR code data:\n\n${JSON.stringify(qrData)}`,
      [{ text: 'OK' }]
    );
  };

  if (hasPermission === null) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000" />
        <View style={styles.messageContainer}>
          <Text style={styles.messageText}>Requesting camera permission...</Text>
        </View>
      </SafeAreaView>
    );
  }

  if (hasPermission === false) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar barStyle="light-content" backgroundColor="#000" />
        <View style={styles.messageContainer}>
          <Text style={styles.messageText}>Camera permission is required to scan QR codes.</Text>
          <TouchableOpacity style={styles.button} onPress={getBarCodeScannerPermissions}>
            <Text style={styles.buttonText}>Grant Permission</Text>
          </TouchableOpacity>
          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <Text style={styles.closeButtonText}>Close</Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#000" />
      
      {/* Header */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>Scan QR Code</Text>
        <Text style={styles.headerSubtitle}>
          {company.name} â€¢ {employee.name}
        </Text>
      </View>

      {/* Scanner */}
      <View style={styles.scannerContainer}>
        <BarCodeScanner
          onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
          style={styles.scanner}
        />
        
        {/* Overlay */}
        <View style={styles.overlay}>
          <View style={styles.scanArea}>
            <View style={styles.corner} />
            <View style={[styles.corner, styles.topRight]} />
            <View style={[styles.corner, styles.bottomLeft]} />
            <View style={[styles.corner, styles.bottomRight]} />
          </View>
        </View>

        {/* Processing indicator */}
        {isProcessing && (
          <View style={styles.processingOverlay}>
            <Text style={styles.processingText}>Processing...</Text>
          </View>
        )}
      </View>

      {/* Instructions */}
      <View style={styles.instructionsContainer}>
        <Text style={styles.instructionsText}>
          Position the QR code within the frame to check in/out
        </Text>
        <Text style={styles.instructionsSubtext}>
          Make sure the QR code is clearly visible and well-lit
        </Text>
      </View>

      {/* Action Buttons */}
      <View style={styles.actionContainer}>
        <TouchableOpacity style={styles.actionButton} onPress={generateQRCode}>
          <Text style={styles.actionButtonText}>Generate Test QR</Text>
        </TouchableOpacity>
        
        <TouchableOpacity style={styles.closeButton} onPress={onClose}>
          <Text style={styles.closeButtonText}>Close Scanner</Text>
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const { width, height } = Dimensions.get('window');
const scanAreaSize = width * 0.7;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  messageContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  messageText: {
    color: '#fff',
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 20,
  },
  header: {
    padding: 20,
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
  },
  headerTitle: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 4,
  },
  headerSubtitle: {
    color: '#ccc',
    fontSize: 14,
  },
  scannerContainer: {
    flex: 1,
    position: 'relative',
  },
  scanner: {
    flex: 1,
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
  },
  scanArea: {
    width: scanAreaSize,
    height: scanAreaSize,
    position: 'relative',
  },
  corner: {
    position: 'absolute',
    width: 30,
    height: 30,
    borderColor: '#007AFF',
    borderWidth: 3,
    borderTopWidth: 3,
    borderLeftWidth: 3,
    borderRightWidth: 0,
    borderBottomWidth: 0,
    top: 0,
    left: 0,
  },
  topRight: {
    top: 0,
    right: 0,
    left: 'auto',
    borderTopWidth: 3,
    borderRightWidth: 3,
    borderLeftWidth: 0,
    borderBottomWidth: 0,
  },
  bottomLeft: {
    bottom: 0,
    top: 'auto',
    borderBottomWidth: 3,
    borderLeftWidth: 3,
    borderTopWidth: 0,
    borderRightWidth: 0,
  },
  bottomRight: {
    bottom: 0,
    right: 0,
    top: 'auto',
    left: 'auto',
    borderBottomWidth: 3,
    borderRightWidth: 3,
    borderTopWidth: 0,
    borderLeftWidth: 0,
  },
  processingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  processingText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  instructionsContainer: {
    padding: 20,
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
  },
  instructionsText: {
    color: '#fff',
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 8,
  },
  instructionsSubtext: {
    color: '#ccc',
    fontSize: 14,
    textAlign: 'center',
  },
  actionContainer: {
    padding: 20,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
  },
  actionButton: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 12,
  },
  actionButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 12,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  closeButton: {
    backgroundColor: 'transparent',
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#666',
  },
  closeButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});
